---
import type { SkillType } from "../types.ts";
import { Separator } from "@/components/ui/separator";
import highlightedSkills from "../assets/highlighted-skills.json";

interface Props {
  skills: SkillType[];
}

const { skills } = Astro.props;
const { name } = Astro.params;
const currentPath = Astro.url.pathname;

const getHighlightedSkills = () => {
  if (name && highlightedSkills[name as keyof typeof highlightedSkills]) {
    return highlightedSkills[name as keyof typeof highlightedSkills]
  }
  return { skills: [], color: '' };
};

const highlightedSkillsData = getHighlightedSkills();

const isHighlightedSkill = (keyword: string) => {
  return highlightedSkillsData.skills.includes(keyword);
};

const getHighlightColor = () => {
  if (highlightedSkillsData.color) {
    return highlightedSkillsData.color;
  }
  return '';
};

const highlightColor = getHighlightColor();
---

  {
    skills.map((skill) => (
      <h2 class="text-md mb-3 font-bold" transition:name={skill.name}>{skill.name}</h2>
      <div class={`mb-6 flex items-center flex-wrap gap-y-3 gap-x-2 ${currentPath !== '/' ? 'justify-end' : ''}`}>
        {skill.keywords.sort().map((keyword, index, sortedKeywords) => (
          <>
            <p 
              class={`text-sm dark:text-white transition-colors duration-1000 ${isHighlightedSkill(keyword) ? highlightColor : ''}`} 
              transition:name={`${skill.name}-${keyword}`}
            >
              {keyword}
            </p>
            {index !== sortedKeywords.length - 1 && (
              <Separator
                className="h-4 bg-gradient-to-b from-background via-gray-700/50 to-background"
                orientation="vertical"
              />
            )}
          </>
        ))}
      </div>
    ))
  }
